NOTE: this code is the actual code for wearable band. This Arduino code detects falls using the MPU-6050 sensor by reading accelerometer and gyroscope data through the I2C protocol. It initializes the sensor in the setup() function and continuously reads motion data in the loop() function. The raw values are converted to acceleration (ax, ay, az) and gyroscope (gx, gy, gz) values, and the overall acceleration magnitude (Amp) is calculated. The fall detection logic works in three stages: first, if the acceleration drops below a threshold, trigger1 is set; if a sudden spike in acceleration follows, trigger2 is activated; and if there is a significant angular change afterward, trigger3 is triggered. If movement remains very low after this sequence, a fall is confirmed and "FALL DETECTED" is printed to the Serial Monitor. If the conditions are not met within certain time limits, the triggers reset automatically. The mpu_read() function fetches the latest sensor data for each loop cycle.






#include <Wire.h>

const int MPU_addr = 0x68; // I2C address of the MPU-6050
int16_t AcX, AcY, AcZ, Tmp, GyX, GyY, GyZ;
float ax = 0, ay = 0, az = 0, gx = 0, gy = 0, gz = 0;

boolean fall = false;
boolean trigger1 = false;
boolean trigger2 = false;
boolean trigger3 = false;

byte trigger1count = 0;
byte trigger2count = 0;
byte trigger3count = 0;

int angleChange = 0;

void setup() {
  Serial.begin(115200);
  Wire.begin();

  Wire.beginTransmission(MPU_addr);
  Wire.write(0x6B); // PWR_MGMT_1 register
  Wire.write(0);    // Wake up MPU-6050
  Wire.endTransmission(true);

  Serial.println("MPU6050 initialized");
}

void loop() {
  mpu_read();

  ax = (AcX - 2050) / 16384.00;
  ay = (AcY - 77) / 16384.00;
  az = (AcZ - 1947) / 16384.00;
  gx = (GyX + 270) / 131.07;
  gy = (GyY - 351) / 131.07;
  gz = (GyZ + 136) / 131.07;

  // Print raw axis values
  Serial.print("AX: "); Serial.print(ax, 2);
  Serial.print("  AY: "); Serial.print(ay, 2);
  Serial.print("  AZ: "); Serial.print(az, 2);
  Serial.print("  GX: "); Serial.print(gx, 2);
  Serial.print("  GY: "); Serial.print(gy, 2);
  Serial.print("  GZ: "); Serial.println(gz, 2);

  float Raw_Amp = sqrt(pow(ax, 2) + pow(ay, 2) + pow(az, 2));
  int Amp = Raw_Amp * 10;

  if (Amp <= 2 && !trigger2) {
    trigger1 = true;
    Serial.println("TRIGGER 1 ACTIVATED");
  }

  if (trigger1) {
    trigger1count++;
    if (Amp >= 12) {
      trigger2 = true;
      Serial.println("TRIGGER 2 ACTIVATED");
      trigger1 = false;
      trigger1count = 0;
    }
  }

  if (trigger2) {
    trigger2count++;
    angleChange = sqrt(pow(gx, 2) + pow(gy, 2) + pow(gz, 2));
    if (angleChange >= 30 && angleChange <= 400) {
      trigger3 = true;
      trigger2 = false;
      trigger2count = 0;
      Serial.println("TRIGGER 3 ACTIVATED");
    }
  }

  if (trigger3) {
    trigger3count++;
    if (trigger3count >= 10) {
      angleChange = sqrt(pow(gx, 2) + pow(gy, 2) + pow(gz, 2));
      if (angleChange >= 0 && angleChange <= 10) {
        fall = true;
        trigger3 = false;
        trigger3count = 0;
      } else {
        trigger3 = false;
        trigger3count = 0;
        Serial.println("TRIGGER 3 DEACTIVATED");
      }
    }
  }

  if (fall) {
    Serial.println("FALL DETECTED");
    fall = false;
  } else {
    Serial.println("No Fall");
  }

  if (trigger2count >= 6) {
    trigger2 = false;
    trigger2count = 0;
    Serial.println("TRIGGER 2 DEACTIVATED");
  }

  if (trigger1count >= 6) {
    trigger1 = false;
    trigger1count = 0;
    Serial.println("TRIGGER 1 DEACTIVATED");
  }

  delay(100);
}

void mpu_read() {
  Wire.beginTransmission(MPU_addr);
  Wire.write(0x3B);
  Wire.endTransmission(false);
  Wire.requestFrom(MPU_addr, 14, true);

  AcX = Wire.read() << 8 | Wire.read();
  AcY = Wire.read() << 8 | Wire.read();
  AcZ = Wire.read() << 8 | Wire.read();
  Tmp = Wire.read() << 8 | Wire.read();
  GyX = Wire.read() << 8 | Wire.read();
  GyY = Wire.read() << 8 | Wire.read();
  GyZ = Wire.read() << 8 | Wire.read();
}
